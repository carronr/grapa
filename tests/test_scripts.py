import os
import glob
import numpy as np

import pytest

from . import grapa_folder, Graph, HiddenPrints


@pytest.fixture
def script_boxplot_folder_prefix(grapa_folder):
    folder = os.path.join(grapa_folder, "examples", "boxplot")
    prefix = "boxplots_"
    yield folder, prefix
    # after yield: code for teardown
    # cleanup files generated by the script
    path = os.path.join(folder, prefix + "*.*")
    for file in glob.glob(path):
        # print("Removing file", file)
        os.remove(file)


def test_script_boxplot(grapa_folder, script_boxplot_folder_prefix):
    from grapa.scripts.script_JVSummaryToBoxPlots import JVSummaryToBoxPlots

    folder, prefix = script_boxplot_folder_prefix
    with HiddenPrints():
        out = JVSummaryToBoxPlots(
            folder=folder, exportPrefix=prefix, pltClose=True, silent=True
        )
    assert isinstance(out, Graph)
    assert len(out) > 0
    path = os.path.join(folder, prefix + "*.*")
    assert len(glob.glob(path)) == 19, "not the expected number of generated files"


@pytest.fixture
def script_correlations_setup_base():
    from grapa.scripts.script_correlations import AUTO

    datakeys = AUTO
    filters = []
    seriesx = None
    seriesy = None
    return datakeys, filters, seriesx, seriesy


def script_correlations_teardown(filename):
    path = ".".join(filename.split(".")[:-1])
    for file in glob.glob(path + "_*.*"):
        # print("Removing file", file)
        os.remove(file)


@pytest.fixture
def script_correlations_setup_1(grapa_folder, script_correlations_setup_base):
    filename = os.path.join(
        grapa_folder,
        "examples",
        "JV",
        "SAMPLE_B_3layerMo",
        "I-V_SAMPLE_B_3LayerMo_Param.txt",
    )
    yield filename, script_correlations_setup_base
    # after yield: teardown code
    script_correlations_teardown(filename)


@pytest.fixture
def script_correlations_setup_2(grapa_folder, script_correlations_setup_base):
    filename = os.path.join(
        grapa_folder,
        "examples",
        "JV",
        "SAMPLE_B_3layerMo",
        "export_SAMPLE_B_3LayerMo_summary_allJV.txt",
    )
    yield filename, script_correlations_setup_base
    # after yield: teardown code
    script_correlations_teardown(filename)


def script_boxplot_assert(out):
    assert isinstance(out, Graph)
    assert len(out) > 0
    assert len(out[0].x()) > 0


def test_script_correlations_1(grapa_folder, script_correlations_setup_1):
    from grapa.scripts.script_correlations import HIGHER, process_file

    fname, other = script_correlations_setup_1
    dkeys, filt, xs, ys = other
    # dkeys = AS_DATATABLE  # not necessarily needed, autodetection should work
    filt = [["Jsc_mApcm2", HIGHER, 33.7]]
    xs = range(11)
    with HiddenPrints():
        out = process_file(fname, datakeys=dkeys, filters=filt, seriesx=xs, seriesy=ys)
    script_boxplot_assert(out)


def test_script_correlations_2(grapa_folder, script_correlations_setup_2):
    from grapa.scripts.script_correlations import HIGHER

    fname, other = script_correlations_setup_2
    dkeys, filt, xs, ys = other
    dkeys = ["Voc", "Jsc", "FF", "area"]  # , 'Eff', 'Rp', 'acquis soft rs']
    filt = [["Jsc", HIGHER, 10]]
    # with HiddenPrints():
    #     out = process_file(fname, datakeys=dkeys, filters=filt, seriesx=xs, seriesy=ys)
    # print("OUT", out)
    # script_boxplot_assert(out)

    """
    # Example
    filename = r'G:\CIGS\RC\_simulations\20230508_Scaps_windowlayers\CIGS_RC\test\CdSX_CdSd_CdSn_ZnOd_ZnOX_AZOX.iv'
    # filename = r'G:\CIGS\RC\_simulations\20230508_Scaps_windowlayers\CIGS_RC\test\CIGStau_CIGSp.iv'
    datakeys_ = ['batch parameters 0 value', 'batch parameters 1 value','temperature [k]']
    filters_ = [["i_ZnO*affinit*", HIGHER, 4.45], [1, '>', 220]]
    """


@pytest.fixture
def script_cf_setup_1(grapa_folder):
    folder = os.path.join(grapa_folder, "examples", "Cf")
    yield folder
    # after yield: teardown code
    # cleanup files generated by the script
    path = os.path.join(folder, "SAMPLE_f1_*.*")
    for file in glob.glob(path):
        # print("Removing file", file)
        os.remove(file)


@pytest.fixture
def script_cv_setup_1(grapa_folder):
    folder = os.path.join(grapa_folder, "examples", "CV")
    yield folder
    # after yield: teardown code
    # cleanup files generated by the script
    path = os.path.join(folder, "SAMPLE_f1_*.*")
    for file in glob.glob(path):
        # print("Removing file", file)
        os.remove(file)


def test_script_cf_success(script_cf_setup_1):
    from grapa.scripts.script_processCVCf import script_processCf

    folder = script_cf_setup_1
    with HiddenPrints():
        graph = script_processCf(folder, pltClose=True)
    assert isinstance(graph, Graph)
    assert len(graph) == 86
    assert len(graph[0].x()) == 20
    assert graph[0].attr("colorbar") == {
        "label": "Derivative - f dC/df",
        "adjust": [1.18, 0, 0.05, 1, "ax"],
    }
    assert len(glob.glob(os.path.join(folder, "SAMPLE_f1_*.*"))) == 16
    graphderiv = Graph(os.path.join(folder, "SAMPLE_f1_deriv.txt"))
    assert graphderiv[18].attr("color") == [1.0, 0.43, 0.0]
    assert len(graphderiv) == 19
    assert np.argmax(graphderiv[0].y(alter="CurveCf.y_mdCdlnf")) == 39
    graphapd = Graph(os.path.join(folder, "SAMPLE_f1_apparentDepth.txt"))
    assert graphapd[0].x(alter="CurveCV.x_CVdepth_nm")[0] == pytest.approx(203.2242409)


def test_script_cf_faults(script_cv_setup_1):
    from grapa.scripts.script_processCVCf import script_processCf

    folder = script_cv_setup_1
    with HiddenPrints():
        graph = script_processCf(folder, pltClose=True)


def test_script_cv_success(script_cv_setup_1):
    from grapa.scripts.script_processCVCf import script_processCV

    folder = script_cv_setup_1
    with HiddenPrints():
        graph = script_processCV(folder, ROIfit=[0.15, 0.3], pltClose=True)

    assert isinstance(graph, Graph)
    assert len(graph) == 38
    c = graph[0]
    assert len(c.x()) == 65
    # test alter possibilities
    assert c.y()[0] == pytest.approx(12.208684210526318)
    assert c.y(alter="CurveCV.y_ym2")[0] == pytest.approx(0.006709069319767074)
    assert c.y(alter="CurveCV.y_CV_Napparent")[0] == pytest.approx(4064630916373032.0)
    assert c.x(alter="CurveCV.x_CVdepth_nm")[0] == pytest.approx(725.2368615092793)

    assert len(glob.glob(os.path.join(folder, "SAMPLE_f1_*.*"))) == 26

    # TODO: many more tests - but with the above, we know script ran and alter work
    # additional test to perform on operations done by script exclusively


@pytest.fixture
def script_jv_setup_a(grapa_folder):
    folder = os.path.join(grapa_folder, "examples", "JV", "SAMPLE_A")
    yield folder
    # after yield: teardown code
    # cleanup files generated by the script
    path = os.path.join(folder, "export_SAMPLE_A_*.*")
    for file in glob.glob(path):
        # print("Removing file", file)
        os.remove(file)


def test_script_jv_a(script_jv_setup_a):
    from grapa.scripts.script_processJV import processJVfolder

    with HiddenPrints():
        graph = processJVfolder(
            script_jv_setup_a, groupCell=True, fitDiodeWeight=5, pltClose=False
        )

    assert len(glob.glob(os.path.join(script_jv_setup_a, "export_SAMPLE_A_*.*"))) == 49
    assert isinstance(graph, Graph)
    assert len(graph) == 5
    c = graph[0]
    assert len(c.x()) == 59
    # test alter possibilities
    assert c.y()[0] == pytest.approx(-0.023187147184714933)
    assert c.y(alter="abs")[0] == pytest.approx(0.023065689)
    assert c.y(alter="abs0")[0] == pytest.approx(0.023187147)
    assert c.y(alter="CurveJV.yDifferentialR")[0] == pytest.approx(32841.88484)
    assert c.x(alter="CurveJV.xinversejminusjsc")[-1] == pytest.approx(3.873941284)
    assert c.y(alter="CurveJV.yDifferentialR")[-1] == pytest.approx(0.553010222)


def test_script_jv_a_nogroup(script_jv_setup_a):
    from grapa.scripts.script_processJV import processJVfolder

    with HiddenPrints():
        graph = processJVfolder(
            script_jv_setup_a, groupCell=False, fitDiodeWeight=5, pltClose=True
        )

    assert len(glob.glob(os.path.join(script_jv_setup_a, "export_SAMPLE_A_*.*"))) == 21
    assert isinstance(graph, Graph)
    assert len(graph) == 6
    assert len(graph[0].x()) == 59
    # test alter possibilities
    assert graph[0].y()[0] == pytest.approx(-0.023187147)
    diodefit = [1.91436593, -1.76413771e-07, 0.00010378469, 0.6799985364, 36157.12380]
    assert graph[0].attr("diodefit") == pytest.approx(diodefit, rel=1e-3)


@pytest.fixture
def script_jv_setup_c(grapa_folder):
    folder = os.path.join(grapa_folder, "examples", "JV", "SAMPLE_C")
    yield folder
    # after yield: teardown code
    # cleanup files generated by the script
    path = os.path.join(folder, "export_SAMPLEC_*.*")
    for file in glob.glob(path):
        # print("Removing file", file)
        os.remove(file)


def test_script_jv_c(script_jv_setup_c):
    from grapa.scripts.script_processJV import processJVfolder

    with HiddenPrints():
        graph = processJVfolder(
            script_jv_setup_c, groupCell=True, fitDiodeWeight=5, pltClose=True
        )

    assert len(glob.glob(os.path.join(script_jv_setup_c, "export_SAMPLEC_*.*"))) == 72
    assert isinstance(graph, Graph)
    assert len(graph) == 18
    assert len(graph[0].x()) == 82
    assert len(graph[1].x()) == 111
    # test alter possibilities
    assert graph[0].y()[0] == pytest.approx(-0.4611043287154675)
    assert graph[0].attr("voc") == pytest.approx(-0.0017829329968604515)
    assert graph[1].attr("voc") == pytest.approx(0.8320694432809792)
    assert graph[1].attr("jsc") == pytest.approx(17.249879599177806)
    diodefit = [4.73272157, -0.03223308602, 0.01504902738, 0.2423267544, 243.254950]
    assert graph[1].attr("diodefit") == pytest.approx(diodefit, rel=1e-2)
    # assert c.y(alter="abs")[0] == pytest.approx(0.023065689)
    # assert c.y(alter="abs0")[0] == pytest.approx(0.023187147)
    # assert c.y(alter="CurveJV.yDifferentialR")[0] == pytest.approx(32841.88484)
    # assert c.x(alter="CurveJV.xinversejminusjsc")[-1] == pytest.approx(3.873941284)
    # assert c.y(alter="CurveJV.yDifferentialR")[-1] == pytest.approx(0.553010222)
